generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @db.Uuid
  fullName          String    @db.VarChar(64)
  nickname          String?   @db.VarChar(32)
  email             String    @unique @db.VarChar(64)
  phone             String    @unique @db.VarChar(20)
  password          String    @db.VarChar(64)
  token             String    @unique @db.VarChar
  isActive          Boolean   @db.Boolean
  createdAt         DateTime  @db.Timestamp(6)
  createdBy         String?   @db.Uuid
  updatedAt         DateTime? @db.Timestamp(6)
  updatedBy         String?   @db.Uuid
  isActiveChangedAt DateTime? @db.Timestamp(6)
  isActiveChangedBy String?   @db.Uuid

  userRelatedToCreatedBy                User?     @relation("userRelatedToCreatedByForUser", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userRelatedToUpdatedBy                User?     @relation("userRelatedToUpdatedByForUser", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userRelatedToStatusChangedBy          User?     @relation("userRelatedToStatusChangedByForUser", fields: [isActiveChangedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userRelatedToCreatedByInUser          User[]    @relation("userRelatedToCreatedByForUser")
  userRelatedToUpdatedByInUser          User[]    @relation("userRelatedToUpdatedByForUser")
  userRelatedToStatusChangedByInUser    User[]    @relation("userRelatedToStatusChangedByForUser")
  userRelatedToCreatedByInAddress       Address[] @relation("userRelatedToCreatedByForAddress")
  userRelatedToUpdatedByInAddress       Address[] @relation("userRelatedToUpdatedByForAddress")
  userRelatedToStatusChangedByInAddress Address[] @relation("userRelatedToStatusChangedByForAddress")
  userRelatedToUserIdInAddress          Address[] @relation("userRelatedToUserIdForAddress")
  userRelatedToCreatedByInPost          Post[]    @relation("userRelatedToCreatedByForPost")
  userRelatedToUpdatedByInPost          Post[]    @relation("userRelatedToUpdatedByForPost")
  userRelatedToStatusChangedByInPost    Post[]    @relation("userRelatedToStatusChangedByForPost")
  userRelatedToAuthorIdInPost           Post[]    @relation("userRelatedToAuthorIdForPost")
}

model Address {
  id                String    @id @db.Uuid
  userId            String    @db.Uuid
  streetOne         String    @db.VarChar
  streetTwo         String?   @db.VarChar
  neighborhood      String?   @db.VarChar
  city              String    @db.VarChar
  state             String    @db.VarChar
  postalCode        String    @db.VarChar
  country           String    @db.VarChar
  addressType       String    @db.VarChar
  isActive          Boolean   @db.Boolean
  createdAt         DateTime  @db.Timestamp(6)
  createdBy         String    @db.Uuid
  updatedAt         DateTime? @db.Timestamp(6)
  updatedBy         String?   @db.Uuid
  isActiveChangedAt DateTime? @db.Timestamp(6)
  isActiveChangedBy String?   @db.Uuid

  userRelatedToCreatedBy       User  @relation("userRelatedToCreatedByForAddress", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userRelatedToUpdatedBy       User? @relation("userRelatedToUpdatedByForAddress", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userRelatedToStatusChangedBy User? @relation("userRelatedToStatusChangedByForAddress", fields: [isActiveChangedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userRelatedToUserId          User  @relation("userRelatedToUserIdForAddress", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Post {
  id                String    @id @db.Uuid
  published         Boolean   @db.Boolean
  authorId          String    @db.Uuid
  title             String    @db.VarChar
  content           String    @db.VarChar
  isActive          Boolean   @db.Boolean
  createdAt         DateTime  @db.Timestamp(6)
  createdBy         String    @db.Uuid
  updatedAt         DateTime? @db.Timestamp(6)
  updatedBy         String?   @db.Uuid
  isActiveChangedAt DateTime? @db.Timestamp(6)
  isActiveChangedBy String?   @db.Uuid

  userRelatedToCreatedBy       User  @relation("userRelatedToCreatedByForPost", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userRelatedToUpdatedBy       User? @relation("userRelatedToUpdatedByForPost", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userRelatedToStatusChangedBy User? @relation("userRelatedToStatusChangedByForPost", fields: [isActiveChangedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userRelatedToAuthorId        User  @relation("userRelatedToAuthorIdForPost", fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
